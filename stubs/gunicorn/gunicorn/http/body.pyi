from _typeshed import Incomplete
from collections.abc import Generator

class ChunkedReader:
    req: Incomplete
    parser: Incomplete
    buf: Incomplete
    def __init__(self, req, unreader) -> None: ...
    def read(self, size): ...
    def parse_trailers(self, unreader, data): ...
    def parse_chunked(self, unreader) -> Generator[Incomplete]: ...
    def parse_chunk_size(self, unreader, data=None): ...
    def get_data(self, unreader, buf) -> None: ...

class LengthReader:
    unreader: Incomplete
    length: Incomplete
    def __init__(self, unreader, length) -> None: ...
    def read(self, size): ...

class EOFReader:
    unreader: Incomplete
    buf: Incomplete
    finished: bool
    def __init__(self, unreader) -> None: ...
    def read(self, size): ...

class Body:
    reader: Incomplete
    buf: Incomplete
    def __init__(self, reader) -> None: ...
    def __iter__(self): ...
    def __next__(self): ...
    next = __next__
    def getsize(self, size): ...
    def read(self, size=None): ...
    def readline(self, size=None): ...
    def readlines(self, size=None): ...
